%{

//=================================================================================
//	Lenguajes y compiladores
// 	Grupo : M3
//	Temas especiales: AVG INLIST
//================================================================================= */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "y.tab.h" //generated by bison -d
void yyerror(char *msg);
char *ptr;
long ret;
%}

%option noyywrap
%option yylineno

INICIO_COM		"-\/"
FIN_COM			"\/-"
SINCERO         [1-9]
DIGITO			[0-9]
LETRA			[a-zA-Z]
BOOLEANO 	true|false
ENTERO          -?{SINCERO}+{DIGITO}*|0
REAL            -?{DIGITO}*[.]{DIGITO}*
STRING         [\"]([^"]|\\.)*[\"]
COMENTARIO		{INICIO_COM}[^\-\/]*{FIN_COM}
COMENTARIO_MULTINIVEL	{INICIO_COM}[^\-\/]*{COMENTARIO}[^\-\/]*{FIN_COM}
ID          {LETRA}({LETRA}|{DIGITO}|[_-])*
%%
write|WRITE {return WRITE;}
read|READ    {return READ;}
float       {return FLOAT;}
int         {return INT;}
bool				{return BOOL;}
string       {return STRING;}
if          {return IF;}
else        {return ELSE;}
while       {return WHILE;}
DEFVAR      {return DEFVAR;}
ENDDEF      {return ENDDEF;}
{ENTERO}    {
				ret = strtol(yytext, &ptr, 10);
				if(ret >= -32768 && ret <= 32768)
				{	
					strcpy(yylval.s, yytext);
					return ENTERO;
					
				}
				yyerror("Rango entero no valido");
			}
{BOOLEANO}    {strcpy(yylval.s, yytext);return BOOLEANO;}
{REAL}      {
				ret = strtol(yytext, &ptr, 10);
				if(ret >= -3.4E+38 && ret <= +3.4E+38)
				{
					strcpy(yylval.s, yytext);
					return REAL;
				}
				yyerror("Rango real no valido");
			}
{STRING}    {strcpy(yylval.s, yytext);return STRING_CONST;}
","         {return COMA;}
":"         {return D_P;}
";"         {return PUNTO_Y_COMA;}
"("         {return P_A;}
")"         {return P_C;}
"["  				{return C_A;}
"]"					{return C_C;}
"{"         {return L_A;}
"}"         {return L_C;}
"++"        {return OP_CONCAT;}
"+"         {return OP_SUM;}
"-"         {return OP_RES;}
"/"         {return OP_DIV;}
"*"         {return OP_MUL;}
"INLIST"		{return INLIST;}
"AVG"				{return AVG;}
MOD         {return MOD;}
DIV         {return DIV;}
">"         {return CMP_MAY;}
"<"         {return CMP_MEN;}
">="        {return CMP_MAYI;}
"<="        {return CMP_MENI;}
"!="        {return CMP_DIST;}
"=="        {return CMP_IGUAL;}
":="        {return ASIG;}
{COMENTARIO} {;}
{ID}        {strcpy(yylval.s, yytext);return ID;}

[\n]        {;}
[\t]        {;}


%%
// [0-9]+(\.[0-9]+)?  {yylval.f = atof(yytext); return NUM;}
// strcpy(yylval.s, yytext);
